<?xml version="1.0" ?>

<ruleset name="Picklewagon">
    <description>Picklewagon PHP coding standard.</description>

    <rule ref="Zend.Files.ClosingTag" />

    <!-- Include all sniffs in the PSR2 standard. -->
    <rule ref="PSR2" />

    <!-- Run against the PHPCompatibility ruleset -->
    <rule ref="PHPCompatibility" />

    <!-- Migrations and seeders do not have namespaces -->
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>database/migrations/*</exclude-pattern>
        <exclude-pattern>database/seeders/*</exclude-pattern>
        <exclude-pattern>database/seeds/*</exclude-pattern>
    </rule>

    <!-- This fails the build if anybody tries to add the env function anywhere but in config and tests -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <exclude-pattern>config</exclude-pattern>
        <exclude-pattern>tests</exclude-pattern>
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="env" value="config" />
            </property>
        </properties>
    </rule>

    <!-- Check for lines with just whitespace -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>10</severity>
    </rule>

    <!-- Require spacing around operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <rule ref="PHPCompatibility">
        <!-- Allow for namespace to be defined as a class method -->
        <exclude name="PHPCompatibility.PHP.ForbiddenNamesAsInvokedFunctions.namespaceFound"/>
    </rule>

    <!-- Include validation sniffing for existing Doc Blocks -->
    <rule ref="Generic.Commenting.DocComment" />
    <!-- Find missing class level Doc Blocks -->
    <rule ref="PEAR.Commenting.ClassComment">
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag"/>
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
    </rule>
    <!--Remove rule enforcing that @param have vertical attribute alignment in class Doc Blocks -->
    <rule ref="PEAR.Commenting.ClassComment.SpacingAfterParamName">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.ClassComment.SpacingAfterParamType">
        <severity>0</severity>
    </rule>

    <!-- Find missing function/method level Doc Blocks -->
    <rule ref="PEAR.Commenting.FunctionComment">
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn" />
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment" />
        <exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamType" />
    </rule>

    <!-- Array formatting -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />
    </rule>
    <rule ref="Generic.Arrays.ArrayIndent" />
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />

    <!-- Type hinting -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversablePropertyTypeHintSpecification" />
        <properties>
            <property name="allAnnotationsAreUseful" value="true" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="1" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />

    <!-- Dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements" />
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter" />
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />

    <!-- Formatting -->
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming" />
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming" />
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming" />
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming" />
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0" />
            <property name="linesCountAfterLastUseWhenLastInClass" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireYodaComparison" />
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration" />
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing" />
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />
</ruleset>
