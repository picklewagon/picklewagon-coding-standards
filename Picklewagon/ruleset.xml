<?xml version="1.0" ?>

<ruleset name="Picklewagon">
    <description>Picklewagon PHP coding standard.</description>

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>

    <rule ref="Zend.Files.ClosingTag" />

    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
        <properties>
            <property name="checkFunctions" value="true" />
            <property name="checkClosures" value="true" />
        </properties>
    </rule>

    <!-- Include all sniffs in the PSR2 standard. -->
    <rule ref="PSR2" />

    <!-- Run against the PHPCompatibility ruleset -->
    <rule ref="PHPCompatibility" />

    <!-- Migrations and seeders do not have namespaces -->
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>database/migrations/*</exclude-pattern>
        <exclude-pattern>database/seeders/*</exclude-pattern>
        <exclude-pattern>database/seeds/*</exclude-pattern>
    </rule>

    <!-- Check for lines with just whitespace -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>10</severity>
    </rule>

    <!-- Require spacing around operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <rule ref="PHPCompatibility">
        <!-- Allow for namespace to be defined as a class method -->
        <exclude name="PHPCompatibility.PHP.ForbiddenNamesAsInvokedFunctions.namespaceFound"/>
    </rule>

    <!-- Include validation sniffing for existing Doc Blocks -->
    <rule ref="Generic.Commenting.DocComment" />
    <!-- Find missing class level Doc Blocks -->
    <rule ref="PEAR.Commenting.ClassComment">
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag"/>
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
    </rule>
    <!--Remove rule enforcing that @param have vertical attribute alignment in class Doc Blocks -->
    <rule ref="PEAR.Commenting.ClassComment.SpacingAfterParamName">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.ClassComment.SpacingAfterParamType">
        <severity>0</severity>
    </rule>

    <!-- Find missing function/method level Doc Blocks -->
    <rule ref="PEAR.Commenting.FunctionComment" />
    <!--Remove rule enforcing that @param have vertical attribute alignment in function/method Doc Blocks -->
    <rule ref="PEAR.Commenting.FunctionComment.SpacingAfterParamName">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.SpacingAfterParamType">
        <severity>0</severity>
    </rule>
</ruleset>
